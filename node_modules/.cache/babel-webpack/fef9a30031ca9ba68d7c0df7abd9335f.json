{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/romai/Documents/Programmation_perso/Application-projet/mon-projet-ionic/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"C:/Users/romai/Documents/Programmation_perso/Application-projet/mon-projet-ionic/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/romai/Documents/Programmation_perso/Application-projet/mon-projet-ionic/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Component, ChangeDetectionStrategy, Renderer2, Input, ViewChild, NgModule } from '@angular/core';\nimport { toDataURL as _toDataURL, toCanvas as _toCanvas, toString } from 'qrcode';\nimport * as ɵngcc0 from '@angular/core';\nvar _c0 = [\"qrcElement\"];\n\nvar QRCodeComponent = /*#__PURE__*/function () {\n  function QRCodeComponent(renderer) {\n    _classCallCheck(this, QRCodeComponent);\n\n    this.renderer = renderer; // Deprecated\n\n    this.colordark = '';\n    this.colorlight = '';\n    this.level = '';\n    this.hidetitle = false;\n    this.size = 0;\n    this.usesvg = false; // Valid for 1.x and 2.x\n\n    this.allowEmptyString = false;\n    this.qrdata = ''; // New fields introduced in 2.0.0\n\n    this.colorDark = '#000000ff';\n    this.colorLight = '#ffffffff';\n    this.cssClass = 'qrcode';\n    this.elementType = 'canvas';\n    this.errorCorrectionLevel = 'M';\n    this.margin = 4;\n    this.scale = 4;\n    this.width = 10; // Deprecation warnings\n\n    if (this.colordark !== '') {\n      console.warn('[angularx-qrcode] colordark is deprecated, use colorDark.');\n    }\n\n    if (this.colorlight !== '') {\n      console.warn('[angularx-qrcode] colorlight is deprecated, use colorLight.');\n    }\n\n    if (this.level !== '') {\n      console.warn('[angularx-qrcode] level is deprecated, use errorCorrectionLevel.');\n    }\n\n    if (this.hidetitle !== false) {\n      console.warn('[angularx-qrcode] hidetitle is deprecated.');\n    }\n\n    if (this.size !== 0) {\n      console.warn('[angularx-qrcode] size is deprecated, use `width`. Defaults to 10.');\n    }\n\n    if (this.usesvg !== false) {\n      console.warn(\"[angularx-qrcode] usesvg is deprecated, use [elementType]=\\\"'svg'\\\".\");\n    }\n  }\n\n  _createClass(QRCodeComponent, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges() {\n      this.createQRCode();\n    }\n  }, {\n    key: \"isValidQrCodeText\",\n    value: function isValidQrCodeText(data) {\n      if (this.allowEmptyString === false) {\n        return !(typeof data === 'undefined' || data === '' || data === 'null' || data === null);\n      }\n\n      return !(typeof data === 'undefined');\n    }\n  }, {\n    key: \"toDataURL\",\n    value: function toDataURL() {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        _toDataURL(_this.qrdata, {\n          color: {\n            dark: _this.colorDark,\n            light: _this.colorLight\n          },\n          errorCorrectionLevel: _this.errorCorrectionLevel,\n          margin: _this.margin,\n          scale: _this.scale,\n          version: _this.version,\n          width: _this.width\n        }, function (err, url) {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(url);\n          }\n        });\n      });\n    }\n  }, {\n    key: \"toCanvas\",\n    value: function toCanvas(canvas) {\n      var _this2 = this;\n\n      return new Promise(function (resolve, reject) {\n        _toCanvas(canvas, _this2.qrdata, {\n          color: {\n            dark: _this2.colorDark,\n            light: _this2.colorLight\n          },\n          errorCorrectionLevel: _this2.errorCorrectionLevel,\n          margin: _this2.margin,\n          scale: _this2.scale,\n          version: _this2.version,\n          width: _this2.width\n        }, function (error) {\n          if (error) {\n            reject(error);\n          } else {\n            resolve('success');\n          }\n        });\n      });\n    }\n  }, {\n    key: \"toSVG\",\n    value: function toSVG() {\n      var _this3 = this;\n\n      return new Promise(function (resolve, reject) {\n        toString(_this3.qrdata, {\n          color: {\n            dark: _this3.colorDark,\n            light: _this3.colorLight\n          },\n          errorCorrectionLevel: _this3.errorCorrectionLevel,\n          margin: _this3.margin,\n          scale: _this3.scale,\n          type: 'svg',\n          version: _this3.version,\n          width: _this3.width\n        }, function (err, url) {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(url);\n          }\n        });\n      });\n    }\n  }, {\n    key: \"renderElement\",\n    value: function renderElement(element) {\n      var _iterator = _createForOfIteratorHelper(this.qrcElement.nativeElement.childNodes),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var node = _step.value;\n          this.renderer.removeChild(this.qrcElement.nativeElement, node);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      this.renderer.appendChild(this.qrcElement.nativeElement, element);\n    }\n  }, {\n    key: \"createQRCode\",\n    value: function createQRCode() {\n      var _this4 = this;\n\n      // Set sensitive defaults\n      if (this.version && this.version > 40) {\n        console.warn('[angularx-qrcode] max value for `version` is 40');\n        this.version = 40;\n      } else if (this.version && this.version < 1) {\n        console.warn('[angularx-qrcode]`min value for `version` is 1');\n        this.version = 1;\n      } else if (this.version !== undefined && isNaN(this.version)) {\n        console.warn('[angularx-qrcode] version should be a number, defaulting to auto.');\n        this.version = undefined;\n      }\n\n      try {\n        if (!this.isValidQrCodeText(this.qrdata)) {\n          throw new Error('[angularx-qrcode] Field `qrdata` is empty, set`allowEmptyString=\"true\"` to overwrite this behaviour.');\n        }\n\n        var element;\n\n        switch (this.elementType) {\n          case 'canvas':\n            element = this.renderer.createElement('canvas');\n            this.toCanvas(element).then(function () {\n              _this4.renderElement(element);\n            }).catch(function (e) {\n              console.error('[angularx-qrcode] canvas error: ', e);\n            });\n            break;\n\n          case 'svg':\n            element = this.renderer.createElement('div');\n            this.toSVG().then(function (svgString) {\n              _this4.renderer.setProperty(element, 'innerHTML', svgString);\n\n              var innerElement = element.firstChild;\n\n              _this4.renderer.setAttribute(innerElement, 'height', \"\".concat(_this4.width));\n\n              _this4.renderer.setAttribute(innerElement, 'width', \"\".concat(_this4.width));\n\n              _this4.renderElement(innerElement);\n            }).catch(function (e) {\n              console.error('[angularx-qrcode] svg error: ', e);\n            });\n            break;\n\n          case 'url':\n          case 'img':\n          default:\n            element = this.renderer.createElement('img');\n            this.toDataURL().then(function (dataUrl) {\n              element.setAttribute('src', dataUrl);\n\n              _this4.renderElement(element);\n            }).catch(function (e) {\n              console.error('[angularx-qrcode] img/url error: ', e);\n            });\n        }\n      } catch (e) {\n        console.error('[angularx-qrcode] Error generating QR Code: ', e.message);\n      }\n    }\n  }]);\n\n  return QRCodeComponent;\n}();\n\nQRCodeComponent.ɵfac = function QRCodeComponent_Factory(t) {\n  return new (t || QRCodeComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2));\n};\n\nQRCodeComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: QRCodeComponent,\n  selectors: [[\"qrcode\"]],\n  viewQuery: function QRCodeComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c0, 3);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.qrcElement = _t.first);\n    }\n  },\n  inputs: {\n    colordark: \"colordark\",\n    colorlight: \"colorlight\",\n    level: \"level\",\n    hidetitle: \"hidetitle\",\n    size: \"size\",\n    usesvg: \"usesvg\",\n    allowEmptyString: \"allowEmptyString\",\n    qrdata: \"qrdata\",\n    colorDark: \"colorDark\",\n    colorLight: \"colorLight\",\n    cssClass: \"cssClass\",\n    elementType: \"elementType\",\n    errorCorrectionLevel: \"errorCorrectionLevel\",\n    margin: \"margin\",\n    scale: \"scale\",\n    width: \"width\",\n    version: \"version\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature],\n  decls: 2,\n  vars: 2,\n  consts: [[\"qrcElement\", \"\"]],\n  template: function QRCodeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelement(0, \"div\", null, 0);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassMap(ctx.cssClass);\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n\nQRCodeComponent.ctorParameters = function () {\n  return [{\n    type: Renderer2\n  }];\n};\n\nQRCodeComponent.propDecorators = {\n  colordark: [{\n    type: Input\n  }],\n  colorlight: [{\n    type: Input\n  }],\n  level: [{\n    type: Input\n  }],\n  hidetitle: [{\n    type: Input\n  }],\n  size: [{\n    type: Input\n  }],\n  usesvg: [{\n    type: Input\n  }],\n  allowEmptyString: [{\n    type: Input\n  }],\n  qrdata: [{\n    type: Input\n  }],\n  colorDark: [{\n    type: Input\n  }],\n  colorLight: [{\n    type: Input\n  }],\n  cssClass: [{\n    type: Input\n  }],\n  elementType: [{\n    type: Input\n  }],\n  errorCorrectionLevel: [{\n    type: Input\n  }],\n  margin: [{\n    type: Input\n  }],\n  scale: [{\n    type: Input\n  }],\n  version: [{\n    type: Input\n  }],\n  width: [{\n    type: Input\n  }],\n  qrcElement: [{\n    type: ViewChild,\n    args: ['qrcElement', {\n      static: true\n    }]\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(QRCodeComponent, [{\n    type: Component,\n    args: [{\n      selector: 'qrcode',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: \"<div #qrcElement [class]=\\\"cssClass\\\"></div>\"\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.Renderer2\n    }];\n  }, {\n    colordark: [{\n      type: Input\n    }],\n    colorlight: [{\n      type: Input\n    }],\n    level: [{\n      type: Input\n    }],\n    hidetitle: [{\n      type: Input\n    }],\n    size: [{\n      type: Input\n    }],\n    usesvg: [{\n      type: Input\n    }],\n    allowEmptyString: [{\n      type: Input\n    }],\n    qrdata: [{\n      type: Input\n    }],\n    colorDark: [{\n      type: Input\n    }],\n    colorLight: [{\n      type: Input\n    }],\n    cssClass: [{\n      type: Input\n    }],\n    elementType: [{\n      type: Input\n    }],\n    errorCorrectionLevel: [{\n      type: Input\n    }],\n    margin: [{\n      type: Input\n    }],\n    scale: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    version: [{\n      type: Input\n    }],\n    qrcElement: [{\n      type: ViewChild,\n      args: ['qrcElement', {\n        static: true\n      }]\n    }]\n  });\n})();\n\nvar QRCodeModule = function QRCodeModule() {\n  _classCallCheck(this, QRCodeModule);\n};\n\nQRCodeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: QRCodeModule\n});\nQRCodeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function QRCodeModule_Factory(t) {\n    return new (t || QRCodeModule)();\n  },\n  providers: []\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(QRCodeModule, {\n    declarations: [QRCodeComponent],\n    exports: [QRCodeComponent]\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(QRCodeModule, [{\n    type: NgModule,\n    args: [{\n      providers: [],\n      declarations: [QRCodeComponent],\n      exports: [QRCodeComponent]\n    }]\n  }], null, null);\n})();\n/*\n * Public API Surface of angularx-qrcode\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { QRCodeComponent, QRCodeModule };","map":{"version":3,"sources":["../../projects/angularx-qrcode/src/lib/angularx-qrcode.component.ts","../../projects/angularx-qrcode/src/lib/angularx-qrcode.module.ts","../../../projects/angularx-qrcode/src/public-api.ts","../../../projects/angularx-qrcode/src/angularx-qrcode.ts"],"names":["QRCode.toDataURL","QRCode.toCanvas","QRCode.toString"],"mappings":"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","sourcesContent":["import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  Renderer2,\n  ViewChild,\n} from '@angular/core';\nimport * as QRCode from 'qrcode';\nimport {\n  QRCodeErrorCorrectionLevel,\n  QRCodeVersion,\n  QRCodeElementType,\n} from './types';\n\n@Component({\n  selector: 'qrcode',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: `<div #qrcElement [class]=\"cssClass\"></div>`,\n})\nexport class QRCodeComponent implements OnChanges {\n  // Deprecated\n  @Input() public colordark = '';\n  @Input() public colorlight = '';\n  @Input() public level = '';\n  @Input() public hidetitle = false;\n  @Input() public size = 0;\n  @Input() public usesvg = false;\n\n  // Valid for 1.x and 2.x\n  @Input() public allowEmptyString = false;\n  @Input() public qrdata = '';\n\n  // New fields introduced in 2.0.0\n  @Input() public colorDark = '#000000ff';\n  @Input() public colorLight = '#ffffffff';\n  @Input() public cssClass = 'qrcode';\n  @Input() public elementType: keyof typeof QRCodeElementType = 'canvas';\n  @Input()\n  public errorCorrectionLevel: keyof typeof QRCodeErrorCorrectionLevel = 'M';\n  @Input() public margin = 4;\n  @Input() public scale = 4;\n  @Input() public version: QRCodeVersion | undefined;\n  @Input() public width = 10;\n\n  @ViewChild('qrcElement', { static: true }) public qrcElement: ElementRef;\n\n  constructor(private renderer: Renderer2) {\n    // Deprecation warnings\n    if (this.colordark !== '') {\n      console.warn('[angularx-qrcode] colordark is deprecated, use colorDark.');\n    }\n    if (this.colorlight !== '') {\n      console.warn(\n        '[angularx-qrcode] colorlight is deprecated, use colorLight.'\n      );\n    }\n    if (this.level !== '') {\n      console.warn(\n        '[angularx-qrcode] level is deprecated, use errorCorrectionLevel.'\n      );\n    }\n    if (this.hidetitle !== false) {\n      console.warn('[angularx-qrcode] hidetitle is deprecated.');\n    }\n    if (this.size !== 0) {\n      console.warn(\n        '[angularx-qrcode] size is deprecated, use `width`. Defaults to 10.'\n      );\n    }\n    if (this.usesvg !== false) {\n      console.warn(\n        `[angularx-qrcode] usesvg is deprecated, use [elementType]=\"'svg'\".`\n      );\n    }\n  }\n\n  public ngOnChanges(): void {\n    this.createQRCode();\n  }\n\n  protected isValidQrCodeText(data: string | null): boolean {\n    if (this.allowEmptyString === false) {\n      return !(\n        typeof data === 'undefined' ||\n        data === '' ||\n        data === 'null' ||\n        data === null\n      );\n    }\n    return !(typeof data === 'undefined');\n  }\n\n  private toDataURL(): Promise<any> {\n    return new Promise(\n      (resolve: (arg: any) => any, reject: (arg: any) => any) => {\n        QRCode.toDataURL(\n          this.qrdata,\n          {\n            color: {\n              dark: this.colorDark,\n              light: this.colorLight,\n            },\n            errorCorrectionLevel: this.errorCorrectionLevel,\n            margin: this.margin,\n            scale: this.scale,\n            version: this.version,\n            width: this.width,\n          },\n          (err, url) => {\n            if (err) {\n              reject(err);\n            } else {\n              resolve(url);\n            }\n          }\n        );\n      }\n    );\n  }\n\n  private toCanvas(canvas: Element): Promise<any> {\n    return new Promise(\n      (resolve: (arg: any) => any, reject: (arg: any) => any) => {\n        QRCode.toCanvas(\n          canvas,\n          this.qrdata,\n          {\n            color: {\n              dark: this.colorDark,\n              light: this.colorLight,\n            },\n            errorCorrectionLevel: this.errorCorrectionLevel,\n            margin: this.margin,\n            scale: this.scale,\n            version: this.version,\n            width: this.width,\n          },\n          (error) => {\n            if (error) {\n              reject(error);\n            } else {\n              resolve('success');\n            }\n          }\n        );\n      }\n    );\n  }\n\n  private toSVG(): Promise<any> {\n    return new Promise(\n      (resolve: (arg: any) => any, reject: (arg: any) => any) => {\n        QRCode.toString(\n          this.qrdata,\n          {\n            color: {\n              dark: this.colorDark,\n              light: this.colorLight,\n            },\n            errorCorrectionLevel: this.errorCorrectionLevel,\n            margin: this.margin,\n            scale: this.scale,\n            type: 'svg',\n            version: this.version,\n            width: this.width,\n          },\n          (err, url) => {\n            if (err) {\n              reject(err);\n            } else {\n              resolve(url);\n            }\n          }\n        );\n      }\n    );\n  }\n\n  private renderElement(element: Element): void {\n    for (const node of this.qrcElement.nativeElement.childNodes) {\n      this.renderer.removeChild(this.qrcElement.nativeElement, node);\n    }\n    this.renderer.appendChild(this.qrcElement.nativeElement, element);\n  }\n\n  private createQRCode(): void {\n    // Set sensitive defaults\n    if (this.version && this.version > 40) {\n      console.warn('[angularx-qrcode] max value for `version` is 40');\n      this.version = 40;\n    } else if (this.version && this.version < 1) {\n      console.warn('[angularx-qrcode]`min value for `version` is 1');\n      this.version = 1;\n    } else if (this.version !== undefined && isNaN(this.version)) {\n      console.warn(\n        '[angularx-qrcode] version should be a number, defaulting to auto.'\n      );\n      this.version = undefined;\n    }\n\n    try {\n      if (!this.isValidQrCodeText(this.qrdata)) {\n        throw new Error(\n          '[angularx-qrcode] Field `qrdata` is empty, set`allowEmptyString=\"true\"` to overwrite this behaviour.'\n        );\n      }\n\n      let element: Element;\n\n      switch (this.elementType) {\n        case 'canvas':\n          element = this.renderer.createElement('canvas');\n          this.toCanvas(element)\n            .then(() => {\n              this.renderElement(element);\n            })\n            .catch((e) => {\n              console.error('[angularx-qrcode] canvas error: ', e);\n            });\n          break;\n        case 'svg':\n          element = this.renderer.createElement('div');\n          this.toSVG()\n            .then((svgString: string) => {\n              this.renderer.setProperty(element, 'innerHTML', svgString);\n              const innerElement = element.firstChild as Element;\n              this.renderer.setAttribute(\n                innerElement,\n                'height',\n                `${this.width}`\n              );\n              this.renderer.setAttribute(\n                innerElement,\n                'width',\n                `${this.width}`\n              );\n\n              this.renderElement(innerElement);\n            })\n            .catch((e) => {\n              console.error('[angularx-qrcode] svg error: ', e);\n            });\n          break;\n        case 'url':\n        case 'img':\n        default:\n          element = this.renderer.createElement('img');\n          this.toDataURL()\n            .then((dataUrl: string) => {\n              element.setAttribute('src', dataUrl);\n              this.renderElement(element);\n            })\n            .catch((e) => {\n              console.error('[angularx-qrcode] img/url error: ', e);\n            });\n      }\n    } catch (e) {\n      console.error('[angularx-qrcode] Error generating QR Code: ', e.message);\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { QRCodeComponent } from './angularx-qrcode.component';\n\n@NgModule({\n  providers: [],\n  declarations: [QRCodeComponent],\n  exports: [QRCodeComponent],\n})\nexport class QRCodeModule {}\n","/*\n * Public API Surface of angularx-qrcode\n */\n\nexport { QRCodeComponent } from './lib/angularx-qrcode.component';\nexport { QRCodeModule } from './lib/angularx-qrcode.module';\nexport * from './lib/types';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]},"metadata":{},"sourceType":"module"}