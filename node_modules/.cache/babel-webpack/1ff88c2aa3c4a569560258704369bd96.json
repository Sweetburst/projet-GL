{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { IonicNativePlugin, cordova } from '@ionic-native/core';\nimport { Observable } from 'rxjs';\nimport * as ɵngcc0 from '@angular/core';\n\nvar QRScanner =\n/** @class */\nfunction (_super) {\n  __extends(QRScanner, _super);\n\n  function QRScanner() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  QRScanner.prototype.prepare = function () {\n    return cordova(this, \"prepare\", {\n      \"callbackStyle\": \"node\"\n    }, arguments);\n  };\n\n  QRScanner.prototype.scan = function () {\n    return cordova(this, \"scan\", {\n      \"callbackStyle\": \"node\",\n      \"observable\": true,\n      \"clearFunction\": \"cancelScan\"\n    }, arguments);\n  };\n\n  QRScanner.prototype.show = function () {\n    return cordova(this, \"show\", {}, arguments);\n  };\n\n  QRScanner.prototype.hide = function () {\n    return cordova(this, \"hide\", {}, arguments);\n  };\n\n  QRScanner.prototype.enableLight = function () {\n    return cordova(this, \"enableLight\", {\n      \"callbackStyle\": \"node\"\n    }, arguments);\n  };\n\n  QRScanner.prototype.destroy = function () {\n    return cordova(this, \"destroy\", {}, arguments);\n  };\n\n  QRScanner.prototype.disableLight = function () {\n    return cordova(this, \"disableLight\", {\n      \"callbackStyle\": \"node\"\n    }, arguments);\n  };\n\n  QRScanner.prototype.useFrontCamera = function () {\n    return cordova(this, \"useFrontCamera\", {\n      \"callbackStyle\": \"node\"\n    }, arguments);\n  };\n\n  QRScanner.prototype.useBackCamera = function () {\n    return cordova(this, \"useBackCamera\", {\n      \"callbackStyle\": \"node\"\n    }, arguments);\n  };\n\n  QRScanner.prototype.useCamera = function (camera) {\n    return cordova(this, \"useCamera\", {\n      \"callbackStyle\": \"node\"\n    }, arguments);\n  };\n\n  QRScanner.prototype.pausePreview = function () {\n    return cordova(this, \"pausePreview\", {}, arguments);\n  };\n\n  QRScanner.prototype.resumePreview = function () {\n    return cordova(this, \"resumePreview\", {}, arguments);\n  };\n\n  QRScanner.prototype.getStatus = function () {\n    return cordova(this, \"getStatus\", {}, arguments);\n  };\n\n  QRScanner.prototype.openSettings = function () {\n    return cordova(this, \"openSettings\", {\n      \"sync\": true\n    }, arguments);\n  };\n\n  QRScanner.pluginName = \"QRScanner\";\n  QRScanner.plugin = \"cordova-plugin-qrscanner\";\n  QRScanner.pluginRef = \"QRScanner\";\n  QRScanner.repo = \"https://github.com/bitpay/cordova-plugin-qrscanner\";\n  QRScanner.platforms = [\"Android\", \"Browser\", \"iOS\", \"Windows\"];\n\n  QRScanner.ɵfac = function QRScanner_Factory(t) {\n    return ɵQRScanner_BaseFactory(t || QRScanner);\n  };\n\n  QRScanner.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n    token: QRScanner,\n    factory: function factory(t) {\n      return QRScanner.ɵfac(t);\n    }\n  });\n  var ɵQRScanner_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(QRScanner);\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(QRScanner, [{\n      type: Injectable\n    }], null, null);\n  })();\n\n  return QRScanner;\n}(IonicNativePlugin);\n\nexport { QRScanner };","map":{"version":3,"sources":["../../../../../src/@ionic-native/plugins/qr-scanner/ngx/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, IonicNativePlugin, Plugin } from '@ionic-native/core';\nimport { Observable } from 'rxjs';\n\nexport interface QRScannerStatus {\n  /**\n   * On iOS and Android 6.0+, camera access is granted at runtime by the user (by clicking \"Allow\" at the dialog).\n   * The authorized property is a boolean value which is true only when the user has allowed camera access to your app (AVAuthorizationStatus.Authorized).\n   * On platforms with permissions granted at install (Android pre-6.0, Windows Phone) this property is always true.\n   */\n  authorized: boolean;\n  /**\n   * A boolean value which is true if the user permanently denied camera access to the app (AVAuthorizationStatus.Denied).\n   * Once denied, camera access can only be gained by requesting the user change their decision (consider offering a link to the setting via openSettings()).\n   */\n  denied: boolean;\n  /**\n   * A boolean value which is true if the user is unable to grant permissions due to parental controls, organization security configuration profiles, or similar reasons.\n   */\n  restricted: boolean;\n  /**\n   * A boolean value which is true if QRScanner is prepared to capture video and render it to the view.\n   */\n  prepared: boolean;\n  /**\n   * A boolean value which is true when the preview layer is visible (and on all platforms but browser, the native webview background is transparent).\n   */\n  showing: boolean;\n  /**\n   * A boolean value which is true if QRScanner is actively scanning for a QR code.\n   */\n  scanning: boolean;\n  /**\n   * A boolean value which is true if QRScanner is displaying a live preview from the device's camera. Set to false when the preview is paused.\n   */\n  previewing: boolean;\n  /**\n   * A boolean value which is true if the light is enabled.\n   */\n  lightEnabled: boolean;\n  /**\n   * A boolean value which is true only if the users' operating system is able to QRScanner.openSettings().\n   */\n  canOpenSettings: boolean;\n  /**\n   * A boolean value which is true only if the users' device can enable a light in the direction of the currentCamera.\n   */\n  canEnableLight: boolean;\n  /**\n   * A boolean value which is true only if the current device \"should\" have a front camera.\n   * The camera may still not be capturable, which would emit error code 3, 4, or 5 when the switch is attempted.\n   * (On the browser platform, this value is false until the prepare method is called.)\n   */\n  canChangeCamera: boolean;\n  /**\n   * A number representing the index of the currentCamera. 0 is the back camera, 1 is the front.\n   */\n  currentCamera: number;\n}\n\n/**\n * @name QR Scanner\n * @capacitorincompatible true\n * @description\n * A fast, energy efficient, highly-configurable QR code scanner for Cordova apps.\n *\n * Requires Cordova plugin: `cordova-plugin-qrscanner`. For more info, please see the [QR Scanner plugin docs](https://github.com/bitpay/cordova-plugin-qrscanner).\n *\n * @usage\n * ```typescript\n * import { QRScanner, QRScannerStatus } from '@ionic-native/qr-scanner/ngx';\n *\n *\n * constructor(private qrScanner: QRScanner) { }\n *\n * ...\n *\n * // Optionally request the permission early\n * this.qrScanner.prepare()\n *   .then((status: QRScannerStatus) => {\n *      if (status.authorized) {\n *        // camera permission was granted\n *\n *\n *        // start scanning\n *        let scanSub = this.qrScanner.scan().subscribe((text: string) => {\n *          console.log('Scanned something', text);\n *\n *          this.qrScanner.hide(); // hide camera preview\n *          scanSub.unsubscribe(); // stop scanning\n *        });\n *\n *      } else if (status.denied) {\n *        // camera permission was permanently denied\n *        // you must use QRScanner.openSettings() method to guide the user to the settings page\n *        // then they can grant the permission from there\n *      } else {\n *        // permission was denied, but not permanently. You can ask for permission again at a later time.\n *      }\n *   })\n *   .catch((e: any) => console.log('Error is', e));\n *\n *\n * ```\n * @interfaces\n * QRScannerStatus\n */\n@Plugin({\n  pluginName: 'QRScanner',\n  plugin: 'cordova-plugin-qrscanner',\n  pluginRef: 'QRScanner',\n  repo: 'https://github.com/bitpay/cordova-plugin-qrscanner',\n  platforms: ['Android', 'Browser', 'iOS', 'Windows'],\n})\n@Injectable()\nexport class QRScanner extends IonicNativePlugin {\n  /**\n   * Request permission to use QR scanner.\n   * @return {Promise<QRScannerStatus>}\n   */\n  @Cordova({\n    callbackStyle: 'node',\n  })\n  prepare(): Promise<QRScannerStatus> {\n    return;\n  }\n\n  /**\n   * Call this method to enable scanning. You must then call the `show` method to make the camera preview visible.\n   * @return {Observable<string>} returns an Observable that emits the scanned text. Unsubscribe from the observable to stop scanning.\n   */\n  @Cordova({\n    callbackStyle: 'node',\n    observable: true,\n    clearFunction: 'cancelScan',\n  })\n  scan(): Observable<string> {\n    return;\n  }\n\n  /**\n   * Configures the native webview to have a transparent background, then sets the background of the <body> and <html> DOM elements to transparent, allowing the webview to re-render with the transparent background.\n   * @returns {Promise<QRScannerStatus>}\n   */\n  @Cordova()\n  show(): Promise<QRScannerStatus> {\n    return;\n  }\n\n  /**\n   * Configures the native webview to be opaque with a white background, covering the video preview.\n   * @returns {Promise<QRScannerStatus>}\n   */\n  @Cordova()\n  hide(): Promise<QRScannerStatus> {\n    return;\n  }\n\n  /**\n   * Enable the device's light (for scanning in low-light environments).\n   * @returns {Promise<QRScannerStatus>}\n   */\n  @Cordova({\n    callbackStyle: 'node',\n  })\n  enableLight(): Promise<QRScannerStatus> {\n    return;\n  }\n\n  /**\n   * Destroy the scanner instance.\n   * @returns {Promise<QRScannerStatus>}\n   */\n  @Cordova()\n  destroy(): Promise<QRScannerStatus> {\n    return;\n  }\n\n  /**\n   * Disable the device's light.\n   * @return {Promise<QRScannerStatus>}\n   */\n  @Cordova({\n    callbackStyle: 'node',\n  })\n  disableLight(): Promise<QRScannerStatus> {\n    return;\n  }\n\n  /**\n   * Use front camera\n   * @return {Promise<QRScannerStatus>}\n   */\n  @Cordova({\n    callbackStyle: 'node',\n  })\n  useFrontCamera(): Promise<QRScannerStatus> {\n    return;\n  }\n\n  /**\n   * Use back camera\n   * @return {Promise<QRScannerStatus>}\n   */\n  @Cordova({\n    callbackStyle: 'node',\n  })\n  useBackCamera(): Promise<QRScannerStatus> {\n    return;\n  }\n\n  /**\n   * Set camera to be used.\n   * @param camera {number} Provide `0` for back camera, and `1` for front camera.\n   * @return {Promise<QRScannerStatus>}\n   */\n  @Cordova({\n    callbackStyle: 'node',\n  })\n  useCamera(camera: number): Promise<QRScannerStatus> {\n    return;\n  }\n\n  /**\n   * Pauses the video preview on the current frame and pauses scanning.\n   * @return {Promise<QRScannerStatus>}\n   */\n  @Cordova()\n  pausePreview(): Promise<QRScannerStatus> {\n    return;\n  }\n\n  /**\n   * Resumse the video preview and resumes scanning.\n   * @return {Promise<QRScannerStatus>}\n   */\n  @Cordova()\n  resumePreview(): Promise<QRScannerStatus> {\n    return;\n  }\n\n  /**\n   * Returns permission status\n   * @return {Promise<QRScannerStatus>}\n   */\n  @Cordova()\n  getStatus(): Promise<QRScannerStatus> {\n    return;\n  }\n\n  /**\n   * Opens settings to edit app permissions.\n   */\n  @Cordova({\n    sync: true,\n  })\n  openSettings(): void {}\n}\n"]},"metadata":{},"sourceType":"module"}