{"ast":null,"code":"var Buffer = require('../utils/buffer');\n\nvar GF = require('./galois-field');\n/**\n * Multiplies two polynomials inside Galois Field\n *\n * @param  {Buffer} p1 Polynomial\n * @param  {Buffer} p2 Polynomial\n * @return {Buffer}    Product of p1 and p2\n */\n\n\nexports.mul = function mul(p1, p2) {\n  var coeff = new Buffer(p1.length + p2.length - 1);\n  coeff.fill(0);\n\n  for (var i = 0; i < p1.length; i++) {\n    for (var j = 0; j < p2.length; j++) {\n      coeff[i + j] ^= GF.mul(p1[i], p2[j]);\n    }\n  }\n\n  return coeff;\n};\n/**\n * Calculate the remainder of polynomials division\n *\n * @param  {Buffer} divident Polynomial\n * @param  {Buffer} divisor  Polynomial\n * @return {Buffer}          Remainder\n */\n\n\nexports.mod = function mod(divident, divisor) {\n  var result = new Buffer(divident);\n\n  while (result.length - divisor.length >= 0) {\n    var coeff = result[0];\n\n    for (var i = 0; i < divisor.length; i++) {\n      result[i] ^= GF.mul(divisor[i], coeff);\n    } // remove all zeros from buffer head\n\n\n    var offset = 0;\n\n    while (offset < result.length && result[offset] === 0) {\n      offset++;\n    }\n\n    result = result.slice(offset);\n  }\n\n  return result;\n};\n/**\n * Generate an irreducible generator polynomial of specified degree\n * (used by Reed-Solomon encoder)\n *\n * @param  {Number} degree Degree of the generator polynomial\n * @return {Buffer}        Buffer containing polynomial coefficients\n */\n\n\nexports.generateECPolynomial = function generateECPolynomial(degree) {\n  var poly = new Buffer([1]);\n\n  for (var i = 0; i < degree; i++) {\n    poly = exports.mul(poly, [1, GF.exp(i)]);\n  }\n\n  return poly;\n};","map":{"version":3,"sources":["C:/Users/romai/Documents/Programmation_perso/Application-projet/mon-projet-ionic/node_modules/qrcode/lib/core/polynomial.js"],"names":["Buffer","require","GF","exports","mul","p1","p2","coeff","length","fill","i","j","mod","divident","divisor","result","offset","slice","generateECPolynomial","degree","poly","exp"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,iBAAD,CAApB;;AACA,IAAIC,EAAE,GAAGD,OAAO,CAAC,gBAAD,CAAhB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAE,OAAO,CAACC,GAAR,GAAc,SAASA,GAAT,CAAcC,EAAd,EAAkBC,EAAlB,EAAsB;AAClC,MAAIC,KAAK,GAAG,IAAIP,MAAJ,CAAWK,EAAE,CAACG,MAAH,GAAYF,EAAE,CAACE,MAAf,GAAwB,CAAnC,CAAZ;AACAD,EAAAA,KAAK,CAACE,IAAN,CAAW,CAAX;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,EAAE,CAACG,MAAvB,EAA+BE,CAAC,EAAhC,EAAoC;AAClC,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,EAAE,CAACE,MAAvB,EAA+BG,CAAC,EAAhC,EAAoC;AAClCJ,MAAAA,KAAK,CAACG,CAAC,GAAGC,CAAL,CAAL,IAAgBT,EAAE,CAACE,GAAH,CAAOC,EAAE,CAACK,CAAD,CAAT,EAAcJ,EAAE,CAACK,CAAD,CAAhB,CAAhB;AACD;AACF;;AAED,SAAOJ,KAAP;AACD,CAXD;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAJ,OAAO,CAACS,GAAR,GAAc,SAASA,GAAT,CAAcC,QAAd,EAAwBC,OAAxB,EAAiC;AAC7C,MAAIC,MAAM,GAAG,IAAIf,MAAJ,CAAWa,QAAX,CAAb;;AAEA,SAAQE,MAAM,CAACP,MAAP,GAAgBM,OAAO,CAACN,MAAzB,IAAoC,CAA3C,EAA8C;AAC5C,QAAID,KAAK,GAAGQ,MAAM,CAAC,CAAD,CAAlB;;AAEA,SAAK,IAAIL,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGI,OAAO,CAACN,MAA5B,EAAoCE,CAAC,EAArC,EAAyC;AACvCK,MAAAA,MAAM,CAACL,CAAD,CAAN,IAAaR,EAAE,CAACE,GAAH,CAAOU,OAAO,CAACJ,CAAD,CAAd,EAAmBH,KAAnB,CAAb;AACD,KAL2C,CAO5C;;;AACA,QAAIS,MAAM,GAAG,CAAb;;AACA,WAAOA,MAAM,GAAGD,MAAM,CAACP,MAAhB,IAA0BO,MAAM,CAACC,MAAD,CAAN,KAAmB,CAApD;AAAuDA,MAAAA,MAAM;AAA7D;;AACAD,IAAAA,MAAM,GAAGA,MAAM,CAACE,KAAP,CAAaD,MAAb,CAAT;AACD;;AAED,SAAOD,MAAP;AACD,CAjBD;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAZ,OAAO,CAACe,oBAAR,GAA+B,SAASA,oBAAT,CAA+BC,MAA/B,EAAuC;AACpE,MAAIC,IAAI,GAAG,IAAIpB,MAAJ,CAAW,CAAC,CAAD,CAAX,CAAX;;AACA,OAAK,IAAIU,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGS,MAApB,EAA4BT,CAAC,EAA7B,EAAiC;AAC/BU,IAAAA,IAAI,GAAGjB,OAAO,CAACC,GAAR,CAAYgB,IAAZ,EAAkB,CAAC,CAAD,EAAIlB,EAAE,CAACmB,GAAH,CAAOX,CAAP,CAAJ,CAAlB,CAAP;AACD;;AAED,SAAOU,IAAP;AACD,CAPD","sourcesContent":["var Buffer = require('../utils/buffer')\nvar GF = require('./galois-field')\n\n/**\n * Multiplies two polynomials inside Galois Field\n *\n * @param  {Buffer} p1 Polynomial\n * @param  {Buffer} p2 Polynomial\n * @return {Buffer}    Product of p1 and p2\n */\nexports.mul = function mul (p1, p2) {\n  var coeff = new Buffer(p1.length + p2.length - 1)\n  coeff.fill(0)\n\n  for (var i = 0; i < p1.length; i++) {\n    for (var j = 0; j < p2.length; j++) {\n      coeff[i + j] ^= GF.mul(p1[i], p2[j])\n    }\n  }\n\n  return coeff\n}\n\n/**\n * Calculate the remainder of polynomials division\n *\n * @param  {Buffer} divident Polynomial\n * @param  {Buffer} divisor  Polynomial\n * @return {Buffer}          Remainder\n */\nexports.mod = function mod (divident, divisor) {\n  var result = new Buffer(divident)\n\n  while ((result.length - divisor.length) >= 0) {\n    var coeff = result[0]\n\n    for (var i = 0; i < divisor.length; i++) {\n      result[i] ^= GF.mul(divisor[i], coeff)\n    }\n\n    // remove all zeros from buffer head\n    var offset = 0\n    while (offset < result.length && result[offset] === 0) offset++\n    result = result.slice(offset)\n  }\n\n  return result\n}\n\n/**\n * Generate an irreducible generator polynomial of specified degree\n * (used by Reed-Solomon encoder)\n *\n * @param  {Number} degree Degree of the generator polynomial\n * @return {Buffer}        Buffer containing polynomial coefficients\n */\nexports.generateECPolynomial = function generateECPolynomial (degree) {\n  var poly = new Buffer([1])\n  for (var i = 0; i < degree; i++) {\n    poly = exports.mul(poly, [1, GF.exp(i)])\n  }\n\n  return poly\n}\n"]},"metadata":{},"sourceType":"script"}