{"ast":null,"code":"var Buffer = require('../utils/buffer');\n\nvar EXP_TABLE;\nvar LOG_TABLE;\n\nif (Buffer.alloc) {\n  EXP_TABLE = Buffer.alloc(512);\n  LOG_TABLE = Buffer.alloc(256);\n} else {\n  EXP_TABLE = new Buffer(512);\n  LOG_TABLE = new Buffer(256);\n}\n/**\n * Precompute the log and anti-log tables for faster computation later\n *\n * For each possible value in the galois field 2^8, we will pre-compute\n * the logarithm and anti-logarithm (exponential) of this value\n *\n * ref {@link https://en.wikiversity.org/wiki/Reed%E2%80%93Solomon_codes_for_coders#Introduction_to_mathematical_fields}\n */\n\n\n;\n\n(function initTables() {\n  var x = 1;\n\n  for (var i = 0; i < 255; i++) {\n    EXP_TABLE[i] = x;\n    LOG_TABLE[x] = i;\n    x <<= 1; // multiply by 2\n    // The QR code specification says to use byte-wise modulo 100011101 arithmetic.\n    // This means that when a number is 256 or larger, it should be XORed with 0x11D.\n\n    if (x & 0x100) {\n      // similar to x >= 256, but a lot faster (because 0x100 == 256)\n      x ^= 0x11D;\n    }\n  } // Optimization: double the size of the anti-log table so that we don't need to mod 255 to\n  // stay inside the bounds (because we will mainly use this table for the multiplication of\n  // two GF numbers, no more).\n  // @see {@link mul}\n\n\n  for (i = 255; i < 512; i++) {\n    EXP_TABLE[i] = EXP_TABLE[i - 255];\n  }\n})();\n/**\n * Returns log value of n inside Galois Field\n *\n * @param  {Number} n\n * @return {Number}\n */\n\n\nexports.log = function log(n) {\n  if (n < 1) throw new Error('log(' + n + ')');\n  return LOG_TABLE[n];\n};\n/**\n * Returns anti-log value of n inside Galois Field\n *\n * @param  {Number} n\n * @return {Number}\n */\n\n\nexports.exp = function exp(n) {\n  return EXP_TABLE[n];\n};\n/**\n * Multiplies two number inside Galois Field\n *\n * @param  {Number} x\n * @param  {Number} y\n * @return {Number}\n */\n\n\nexports.mul = function mul(x, y) {\n  if (x === 0 || y === 0) return 0; // should be EXP_TABLE[(LOG_TABLE[x] + LOG_TABLE[y]) % 255] if EXP_TABLE wasn't oversized\n  // @see {@link initTables}\n\n  return EXP_TABLE[LOG_TABLE[x] + LOG_TABLE[y]];\n};","map":{"version":3,"sources":["C:/Users/romai/Documents/Programmation_perso/Application-projet/mon-projet-ionic/node_modules/qrcode/lib/core/galois-field.js"],"names":["Buffer","require","EXP_TABLE","LOG_TABLE","alloc","initTables","x","i","exports","log","n","Error","exp","mul","y"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,iBAAD,CAApB;;AAEA,IAAIC,SAAJ;AACA,IAAIC,SAAJ;;AAEA,IAAIH,MAAM,CAACI,KAAX,EAAkB;AAChBF,EAAAA,SAAS,GAAGF,MAAM,CAACI,KAAP,CAAa,GAAb,CAAZ;AACAD,EAAAA,SAAS,GAAGH,MAAM,CAACI,KAAP,CAAa,GAAb,CAAZ;AACD,CAHD,MAGO;AACLF,EAAAA,SAAS,GAAG,IAAIF,MAAJ,CAAW,GAAX,CAAZ;AACAG,EAAAA,SAAS,GAAG,IAAIH,MAAJ,CAAW,GAAX,CAAZ;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;;AAAE,UAASK,UAAT,GAAuB;AACvB,MAAIC,CAAC,GAAG,CAAR;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,GAApB,EAAyBA,CAAC,EAA1B,EAA8B;AAC5BL,IAAAA,SAAS,CAACK,CAAD,CAAT,GAAeD,CAAf;AACAH,IAAAA,SAAS,CAACG,CAAD,CAAT,GAAeC,CAAf;AAEAD,IAAAA,CAAC,KAAK,CAAN,CAJ4B,CAIpB;AAER;AACA;;AACA,QAAIA,CAAC,GAAG,KAAR,EAAe;AAAE;AACfA,MAAAA,CAAC,IAAI,KAAL;AACD;AACF,GAbsB,CAevB;AACA;AACA;AACA;;;AACA,OAAKC,CAAC,GAAG,GAAT,EAAcA,CAAC,GAAG,GAAlB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1BL,IAAAA,SAAS,CAACK,CAAD,CAAT,GAAeL,SAAS,CAACK,CAAC,GAAG,GAAL,CAAxB;AACD;AACF,CAtBC,GAAD;AAwBD;AACA;AACA;AACA;AACA;AACA;;;AACAC,OAAO,CAACC,GAAR,GAAc,SAASA,GAAT,CAAcC,CAAd,EAAiB;AAC7B,MAAIA,CAAC,GAAG,CAAR,EAAW,MAAM,IAAIC,KAAJ,CAAU,SAASD,CAAT,GAAa,GAAvB,CAAN;AACX,SAAOP,SAAS,CAACO,CAAD,CAAhB;AACD,CAHD;AAKA;AACA;AACA;AACA;AACA;AACA;;;AACAF,OAAO,CAACI,GAAR,GAAc,SAASA,GAAT,CAAcF,CAAd,EAAiB;AAC7B,SAAOR,SAAS,CAACQ,CAAD,CAAhB;AACD,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAF,OAAO,CAACK,GAAR,GAAc,SAASA,GAAT,CAAcP,CAAd,EAAiBQ,CAAjB,EAAoB;AAChC,MAAIR,CAAC,KAAK,CAAN,IAAWQ,CAAC,KAAK,CAArB,EAAwB,OAAO,CAAP,CADQ,CAGhC;AACA;;AACA,SAAOZ,SAAS,CAACC,SAAS,CAACG,CAAD,CAAT,GAAeH,SAAS,CAACW,CAAD,CAAzB,CAAhB;AACD,CAND","sourcesContent":["var Buffer = require('../utils/buffer')\n\nvar EXP_TABLE\nvar LOG_TABLE\n\nif (Buffer.alloc) {\n  EXP_TABLE = Buffer.alloc(512)\n  LOG_TABLE = Buffer.alloc(256)\n} else {\n  EXP_TABLE = new Buffer(512)\n  LOG_TABLE = new Buffer(256)\n}\n/**\n * Precompute the log and anti-log tables for faster computation later\n *\n * For each possible value in the galois field 2^8, we will pre-compute\n * the logarithm and anti-logarithm (exponential) of this value\n *\n * ref {@link https://en.wikiversity.org/wiki/Reed%E2%80%93Solomon_codes_for_coders#Introduction_to_mathematical_fields}\n */\n;(function initTables () {\n  var x = 1\n  for (var i = 0; i < 255; i++) {\n    EXP_TABLE[i] = x\n    LOG_TABLE[x] = i\n\n    x <<= 1 // multiply by 2\n\n    // The QR code specification says to use byte-wise modulo 100011101 arithmetic.\n    // This means that when a number is 256 or larger, it should be XORed with 0x11D.\n    if (x & 0x100) { // similar to x >= 256, but a lot faster (because 0x100 == 256)\n      x ^= 0x11D\n    }\n  }\n\n  // Optimization: double the size of the anti-log table so that we don't need to mod 255 to\n  // stay inside the bounds (because we will mainly use this table for the multiplication of\n  // two GF numbers, no more).\n  // @see {@link mul}\n  for (i = 255; i < 512; i++) {\n    EXP_TABLE[i] = EXP_TABLE[i - 255]\n  }\n}())\n\n/**\n * Returns log value of n inside Galois Field\n *\n * @param  {Number} n\n * @return {Number}\n */\nexports.log = function log (n) {\n  if (n < 1) throw new Error('log(' + n + ')')\n  return LOG_TABLE[n]\n}\n\n/**\n * Returns anti-log value of n inside Galois Field\n *\n * @param  {Number} n\n * @return {Number}\n */\nexports.exp = function exp (n) {\n  return EXP_TABLE[n]\n}\n\n/**\n * Multiplies two number inside Galois Field\n *\n * @param  {Number} x\n * @param  {Number} y\n * @return {Number}\n */\nexports.mul = function mul (x, y) {\n  if (x === 0 || y === 0) return 0\n\n  // should be EXP_TABLE[(LOG_TABLE[x] + LOG_TABLE[y]) % 255] if EXP_TABLE wasn't oversized\n  // @see {@link initTables}\n  return EXP_TABLE[LOG_TABLE[x] + LOG_TABLE[y]]\n}\n"]},"metadata":{},"sourceType":"script"}